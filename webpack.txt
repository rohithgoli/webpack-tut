
# About Webpack

    + webpack is a module bundler
    + In real world, each industry projects have test env, prod env etc..
        + We can't use create-react-app for it as it is very heavy & it increases the bundle size of our Application
        + Using webpack allows us to seperate-out data, env. variables & configuration for each env. without the need
            of changing the codebase
    + Using webpack, allows us to use latest ES6 features like import, export syntax which we cannot use without bundler like webpack
        if done without a bundler --> SyntaxError: Cannot use import statement outside a module
    
 + Learn how to do configuration of webpack, so that we can install only packages we need & configure it for different environments
 + Learn how to optimize our Application for production & steps to deploy it to production
 + Highly important to know how to configure webpack from scratch as a Developer.


# Installing and using webpack

+ Initialize a package.json file using --> npm init -y
+ Install req. packages using --> npm install webpack webpack-cli
+ Create a file at project root with name --> webpack.config.js
    It will be considered as node js file, so use module.exports syntax
    which is a node js way of exporting data from file
    instead of ES6 export syntax


# Configuration

+ entry --> a property where we specify the main file, from where our application starts, entry point of our application
                inside src folder --> create index.js file --> main file of our application
+ output --> a property to specify the name and location of the file, where the generated output
                will be stored
                
                filename --> a property which indicates the file name of generated output, 
                                in general bundle.js
                path --> a property to specify the location of folder, where the output file will be created
                                in general inside public folder
                                
                (To find out the exact path of the folder, we can use nodejs path module
                __dirname, will give the directory of the current file)
+ mode --> a property to let webpack know the environment, such as development etc..     
                
           
        We need to include the generated bundle.js file inside the index.html file
        so that, we can render it
+ we can build using --> npm run webpack --watch
        you can add build property with value webpack --watch under scripts, in package.json
        
   ****** Thus creation of basic webpack configuration to render the content is completed ******👍 ✅ 
    
    
    
# Adding react code to the application
    

+ Install react & react-dom packages --> npm install react react-dom 
    + If we try to render some content in React
        --> Module parse fails
            --> We need an appropriate loader to handle this file type,
                & currently no loaders are configured to process this file
                Refer: https://webpack.js.org/concepts#loaders
    + This is because, we are using jsx syntax for render method
        & webpack don't have any idea on how to render the jsx :(
        
        But, if we use React.createElement instead of jsx, webpack compiles successfully without any error

+ loaders(Babel) are required to use jsx as it can handle jsx
+ To use Babel, install babel-core as dev dependency using --> npm install @babel/core --save-dev
    $$$  when we don't use any package directly in our code, it should be installed as a dev dependency.  $$$
    

+ Still we encounter the same issue that we need appropriate loader is needed if we try to build
    
    
+ So install package as a dev-dependency --> npm install babel-loader --save-dev
+ Now we need to instruct webpack to use loader to convert react in ES6 to ES5 which all browsers understand

+ module --> a property to configure loaders
    rules --> a property which contains array as value
                Array contains rules which are objects

+ If we try to run build, we encounter Module build failed because
    By default babel-loader does not have any functionality &
    we need to add external plugins and presets to tell them what to do
    so, we need to install react & env presets using --> npm install @babel/preset-env @babel/preset-react

    preset-env is used to convert ES6 to ES5 code
    preset-react is required to convert jsx to ES5 code

    To specify these presets to be used by babel-loader,
        we need to create .babelrc file at the root of the project
            presets --> a property for which we provide all the required presets as an array
            
    Now, if we try to run build, it works well
    
    ****** Thus creation for basic webpack configuration for react is completed *****👍 ✅ 

+ Install css-loader & style-loader
    css-loader is used to parse the css code
    style-loader is used to inject the final css into style tag in html file

    Now, we must configure webpack about the loaders, Order in which loaders are to be specified is also important
    they will parse from right to left

    While bundling, css is also added in js file, we can see about separating it in optimization section

+ Install sass-loader
    npm install sass-loader --save-dev

    error --> Cannot find module 'sass'
    So to use scss file with its syntax, we normally use node-sass npm package
    but it is deprecated and not recommended to use
    Instead sass npm pkg is recommended to use --> npm install sass

+ webpack provides its own server known as webpack-dev-server
